class Solution {
public:
    int helper(vector<vector<int>> arr,vector<vector<int>>& dp,int m,int n){
        // if(m==0 and n==0)
        if(m<0 or n<0)return 0;
        if(arr[m][n]==1)return 0;
        if(m==0 and n==0)return 1;
        if(dp[m][n]!=-1)return dp[m][n];
        int x=helper(arr,dp,m-1,n);
        int y=helper(arr,dp,m,n-1);
        return dp[m][n]=x+y;
    }
    int uniquePathsWithObstacles(vector<vector<int>>& obstacleGrid) {
        int m=obstacleGrid.size(),n=obstacleGrid[0].size();
        vector<vector<int>> dp(m,vector<int>(n,-1));
        return helper(obstacleGrid,dp,m-1,n-1);
    }
};
