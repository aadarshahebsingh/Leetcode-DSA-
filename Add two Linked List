/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    void ans(ListNode* &head,ListNode*  &tail,int val){
        ListNode* temp=new ListNode(val);
        if(head==NULL){
            head=temp;
            tail=temp;
            return;
        }else{
            tail->next=temp;
            tail=temp;
            return;
        }
    }
    ListNode* add(ListNode* l1, ListNode* l2){
        int carry=0;
        ListNode* head=NULL;
        ListNode* tail=NULL;
        while(l1!=NULL and l2!=NULL){
            int data=carry+l1->val+l2->val;
            int val=data%10;
            ans(head,tail,val);
            carry=data/10;
            cout<<" hello "<<endl;
            l1=l1->next;
            l2=l2->next;
        }
        while(l1!=NULL){
            int data=carry+l1->val;
            int val=data%10;
            ans(head,tail,val);
            carry=data/10;
            l1=l1->next;
        }
        while(l2!=NULL){
            int data=carry+l2->val;
            int val=data%10;
            ans(head,tail,val);
            carry=data/10;
            l2=l2->next;
        }
        while(carry!=NULL){
            int data=carry;
            int val=data%10;
            ans(head,tail,val);
            carry=data/10;
        }
        return head;
    }
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        ListNode* ans=add(l1,l2);
        return ans;
    }
};
